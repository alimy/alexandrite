// Code generated by go-mir. DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/alimy/mir/v2"

	mux "github.com/gorilla/mux"
)

// just use for mir.Any method to register
var httpMethods = mir.HttpMethods

type Frontend interface {
	// Chain provide middlewares for mux
	Chain() []mux.MiddlewareFunc

	Index(http.ResponseWriter, *http.Request)
	Me(http.ResponseWriter, *http.Request)
	Search(http.ResponseWriter, *http.Request)
	MostDownloaded(http.ResponseWriter, *http.Request)
	LastUpdated(http.ResponseWriter, *http.Request)
	Crate(http.ResponseWriter, *http.Request)
	Login(http.ResponseWriter, *http.Request)
	LoginPost(http.ResponseWriter, *http.Request)
	Logout(http.ResponseWriter, *http.Request)
	Register(http.ResponseWriter, *http.Request)
	RegisterPost(http.ResponseWriter, *http.Request)
	Manage(http.ResponseWriter, *http.Request)
	Password(http.ResponseWriter, *http.Request)
	Tokens(http.ResponseWriter, *http.Request)
	RevokeToken(http.ResponseWriter, *http.Request)

	mustEmbedUnimplementedFrontendServant()
}

// RegisterFrontendServant register Frontend servant to mux
func RegisterFrontendServant(r *mux.Router, s Frontend) {
	router := r

	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	router.HandleFunc("/", s.Index).
		Methods("GET")
	router.HandleFunc("/me", s.Me).
		Methods("GET")
	router.HandleFunc("/search", s.Search).
		Methods("GET")
	router.HandleFunc("/most-downloaded", s.MostDownloaded).
		Methods("GET")
	router.HandleFunc("/last-updated", s.LastUpdated).
		Methods("GET")
	router.HandleFunc("/crates/{crate}", s.Crate).
		Methods("GET")
	router.HandleFunc("/account/login", s.Login).
		Methods("GET")
	router.HandleFunc("/account/login", s.LoginPost).
		Methods("POST")
	router.HandleFunc("/account/logout", s.Logout).
		Methods("GET")
	router.HandleFunc("/account/register", s.Register).
		Methods("GET")
	router.HandleFunc("/account/register", s.RegisterPost).
		Methods("POST")
	router.HandleFunc("/account/manage", s.Manage).
		Methods("GET")
	router.HandleFunc("/account/manage/password", s.Password).
		Methods("POST")
	router.HandleFunc("/account/manage/tokens", s.Tokens).
		Methods("POST")
	router.HandleFunc("/account/manage/tokens/{token-id}/revoke", s.RevokeToken).
		Methods("GET")
}

// UnimplementedFrontendServant can be embedded to have forward compatible implementations.
type UnimplementedFrontendServant struct {
}

func (UnimplementedFrontendServant) Chain() []mux.MiddlewareFunc {
	return nil
}

func (UnimplementedFrontendServant) Index(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Index not implemented"))
}

func (UnimplementedFrontendServant) Me(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Me not implemented"))
}

func (UnimplementedFrontendServant) Search(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Search not implemented"))
}

func (UnimplementedFrontendServant) MostDownloaded(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method MostDownloaded not implemented"))
}

func (UnimplementedFrontendServant) LastUpdated(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method LastUpdated not implemented"))
}

func (UnimplementedFrontendServant) Crate(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Crate not implemented"))
}

func (UnimplementedFrontendServant) Login(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Login not implemented"))
}

func (UnimplementedFrontendServant) LoginPost(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method LoginPost not implemented"))
}

func (UnimplementedFrontendServant) Logout(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Logout not implemented"))
}

func (UnimplementedFrontendServant) Register(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Register not implemented"))
}

func (UnimplementedFrontendServant) RegisterPost(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method RegisterPost not implemented"))
}

func (UnimplementedFrontendServant) Manage(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Manage not implemented"))
}

func (UnimplementedFrontendServant) Password(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Password not implemented"))
}

func (UnimplementedFrontendServant) Tokens(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method Tokens not implemented"))
}

func (UnimplementedFrontendServant) RevokeToken(rw http.ResponseWriter, r *http.Request) {
	rw.WriteHeader(http.StatusNotImplemented)
	rw.Write([]byte("method RevokeToken not implemented"))
}

func (UnimplementedFrontendServant) mustEmbedUnimplementedFrontendServant() {}
